name: CI

on:
  push:

jobs:
  lint:
    runs-on: [self-hosted, node]
    steps:
      - name: Checkout monorepo
        uses: actions/checkout@v3

      - name: Dependency UI cache
        uses: actions/cache@v3
        with:
          path: "packages/ui/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('packages/ui/yarn.lock') }}

      - name: Check lint in ui
        run: |
          cd packages/ui/
          yarn install
          yarn lint

      - name: Dependency Background cache
        uses: actions/cache@v3
        with:
          path: "packages/background/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('packages/background/yarn.lock') }}

      - name: Check lint in background
        run: |
          cd packages/background/
          yarn install
          yarn lint

      - name: Dependency Provider cache
        uses: actions/cache@v3
        with:
          path: "packages/provider/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('packages/provider/yarn.lock') }}

      - name: Check lint in provider
        run: |
          cd packages/provider/
          yarn install
          yarn lint
  test:
    runs-on: [self-hosted, node]
    steps:
      - name: Checkout monorepo
        uses: actions/checkout@v2

      - name: Dependency UI cache
        uses: actions/cache@v3
        with:
          path: "packages/ui/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('packages/ui/yarn.lock') }}

      - name: Install UI dependencies
        run: |
          cd packages/ui/ && yarn install --prefer-offline --frozen-lockfile

      - name: Dependency Background cache
        uses: actions/cache@v3
        with:
          path: "packages/background/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('packages/background/yarn.lock') }}

      - name: Install background dependencies
        run: cd packages/background/ && yarn install --prefer-offline --frozen-lockfile
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}

      - name: Dependency Provider cache
        uses: actions/cache@v3
        with:
          path: "packages/provider/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('packages/provider/yarn.lock') }}

      - name: Install provider dependencies
        run: cd packages/provider/ && yarn install --prefer-offline --frozen-lockfile

      - name: Install node
        uses: actions/setup-node@v3
        with:
          node-version-file: .nvmrc

      - name: Install yarn
        run: |
          curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
          echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
          sudo apt update
          apt install -y yarn --no-install-recommends

      - name: Test ui
        run: |
          cd packages/ui
          #make test/ui
        env:
          INFURA_PROJECT_ID: ${{ secrets.INFURA_PROJECT_ID }}
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}

      - name: Test provider
        run: |
          cd packages/provider
          #make test/provider

      - name: Test background
        run: |
          cd packages/background
          #make test/background

  build:
    runs-on: [self-hosted, node]
    steps:
      - name: Checkout monorepo
        uses: actions/checkout@v2

      - name: Dependency UI cache
        uses: actions/cache@v3
        with:
          path: "packages/ui/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('packages/ui/yarn.lock') }}

      - name: Install UI dependencies
        run: |
          cd packages/ui/ && yarn install --prefer-offline --frozen-lockfile

      - name: Dependency Background cache
        uses: actions/cache@v3
        with:
          path: "packages/background/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('packages/background/yarn.lock') }}

      - name: Install background dependencies
        run: cd packages/background/ && yarn install --prefer-offline --frozen-lockfile
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}

      - name: Dependency Provider cache
        uses: actions/cache@v3
        with:
          path: "packages/provider/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('packages/provider/yarn.lock') }}

      - name: Install provider dependencies
        run: cd packages/provider/ && yarn install --prefer-offline --frozen-lockfile

      - name: Install node
        uses: actions/setup-node@v3
        with:
          node-version-file: .nvmrc

      - name: Install yarn
        run: |
          curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
          echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
          sudo apt update
          apt install -y yarn --no-install-recommends

      - name: Build extension
        run: |
          yarn build-prod
        env:
          CI: false

      - name: Zip build
        id: zip
        run: |
          file=block-wallet-${GITHUB_SHA::7}
          zip -r -D $file dist/
          echo "::set-output name=file::$file.zip"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_RELEASE_BUCKET }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_RELEASE_BUCKET }}
          aws-region: us-east-2

      - name: Upload zip to S3
        run: |
          s3_url=s3://releases.blockwallet.io/tmp/
          aws s3 cp ${{ steps.zip.outputs.file }} $s3_url
          s3_url_https=$(echo "${s3_url/s3/https}")
          echo $s3_url_https > blockwallet-build.txt

      - name: Save extension link
        uses: actions/upload-artifact@v2
        with:
          name: blockwallet-build
          if-no-files-found: error
          path: url.txt

  e2e:
    needs: [build]
    runs-on: [self-hosted, node]

    steps:
      - name: Checkout e2e repository
        uses: actions/checkout@v2
        with:
          repository: block-wallet/e2e-tests
          ref: refs/heads/main
          token: ${{ secrets.PAT }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_RELEASE_BUCKET }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_RELEASE_BUCKET }}
          aws-region: us-east-2

      - name: Install node
        uses: actions/setup-node@v3
        with:
          node-version-file: .nvmrc

      - name: Install yarn
        run: |
          curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
          echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
          sudo apt update
          apt install -y yarn --no-install-recommends

      - name: Cache e2e dependencies and cypress binary
        id: cache-cypress
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
            ~/.cache/Cypress
          key: ${{ runner.os }}-cypress-${{ hashFiles('**/yarn.lock') }}

      - name: Install Cypress linux dependencies
        run: |
          apt install -y libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2 libxtst6 xauth xvfb

      - name: Install e2e dependencies
        run: |
          yarn install --prefer-offline --frozen-lockfile

      - name: Cache Chrome
        uses: actions/cache@v3
        id: cache-chrome
        with:
          path: /usr/src/google-chrome-stable_current_amd64.deb
          key: ${{ env.CHROME_VERSION }}

      - name: Download Chrome
        if: steps.cache-chrome.outputs.cache-hit != 'true'
        run: |
          wget -O /usr/src/google-chrome-stable_current_amd64.deb "http://dl.google.com/linux/chrome/deb/pool/main/g/google-chrome-stable/google-chrome-stable_$CHROME_VERSION-1_amd64.deb"

      - name: Install Chrome
        run: |
          apt install -y /usr/src/google-chrome-stable_current_amd64.deb

      - name: Download the extension
        uses: actions/download-artifact@v2
        with:
          name: blockwallet-build
          path: blockwallet-build

      - name: Download extension
        run: |
          apt install -y unzip
          rm -rf blockwallet-extension
          url=$(cat blockwallet-build/url.txt)
          wget $url -O blockwallet-extension.zip
          unzip blockwallet-extension
          mv dist blockwallet-extension

      - name: UI Tests - Chrome
        run: |
          DBUS_SESSION_BUS_ADDRESS=/dev/null yarn run test:e2e
        env:
          ETHERSCAN_KEY: ${{ secrets.ETHERSCAN_KEY }}
          GITHUB_TOKEN: ${{ secrets.PAT }}
          TEST_TAGS: puppeteer,extension
