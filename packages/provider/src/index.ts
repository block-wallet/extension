import BlankProvider from './provider/BlankProvider';
import {
    Origin,
    WindowTransportResponseMessage,
} from '@block-wallet/background/utils/types/communication';
import log, { LogLevelDesc } from 'loglevel';
import shimWeb3 from './utils/shimWeb3';
import { InjectedWindow, SignalMessage } from './types';

// Setting the default log level:
log.setLevel((process.env.LOG_LEVEL as LogLevelDesc) || 'warn');

const blankProvider: BlankProvider = new BlankProvider();

const provider = new Proxy(blankProvider, {
    deleteProperty: () => true,
});

shimWeb3(provider);

(window as Window & InjectedWindow).ethereum = provider;

window.dispatchEvent(
    new CustomEvent('ethereum#initialized', { detail: 'isBlockWallet' })
);

// Listens to events generated by the background script
window.addEventListener(
    'message',
    ({
        data,
        source,
    }: MessageEvent<WindowTransportResponseMessage | SignalMessage>): void => {
        // Only allow messages from our window, by the loader
        if (
            source !== window ||
            data.origin !== Origin.BACKGROUND ||
            !blankProvider
        ) {
            return;
        }

        // Check if we're reinitializing the SW
        if ('signal' in data) {
            blankProvider.handleSignal(data.signal);
        } else if (data.id) {
            blankProvider.handleResponse(data);
        } else {
            log.error('Missing response id.');
        }
    }
);
